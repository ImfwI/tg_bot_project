# main.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiosqlite
import asyncio
import logging
import advice
import chat

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = "TOKEN"
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

message_history = []

# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationForm(StatesGroup):
    name = State()

@dp.message(Command(commands=["menu"]))
async def menu_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
class ChatState(StatesGroup):
    chatting = State()

# –ö–æ–º–∞–Ω–¥–∞ /chat
@dp.message(Command(commands=["chat"]))
async def start_chat(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°—Ç–æ–ø")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(ChatState.chatting)
    message_history = []
    await message.answer(
        "–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—Å—è! –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–æ–ø' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /stop.",
        reply_markup=keyboard
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ /stop –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–°—Ç–æ–ø")
@dp.message(F.text == "–°—Ç–æ–ø")
@dp.message(Command(commands=["stop"]))
async def stop_chat(message: types.Message, state: FSMContext):
    if await state.get_state() == ChatState.chatting.state:
        await state.clear()
        await message.answer(
            "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞.")

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"), KeyboardButton(text="üìç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º—É—Å–æ—Ä–∞")],
            [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"), KeyboardButton(text="üå± –û—á–∫–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")],
        ],
        resize_keyboard=True
    )
    return keyboard


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
def articles_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏", url="https://aif.ru/tag/plastik")]
        ]
    )
    return keyboard


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT,
            points INTEGER DEFAULT 0
        )
        """)
        await db.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_user_registered(user_id: int) -> bool:
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT 1 FROM users WHERE id = ?", (user_id,)) as cursor:
            return await cursor.fetchone() is not None


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    if await is_user_registered(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu())

    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(RegistrationForm.name)

# FSM: –≤–≤–æ–¥ –∏–º–µ–Ω–∏
@dp.message(RegistrationForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            "INSERT INTO users (id, name, points) VALUES (?, ?, ?)",
            (message.from_user.id, message.text, 0)
        )
        await db.commit()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {message.text}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=main_menu()
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ç–µ–π
@dp.message(F.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
async def send_articles(message: types.Message):
    await message.answer(
        "–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –≤—Ä–µ–¥–µ –ø–ª–∞—Å—Ç–∏–∫–∞:", 
        reply_markup=articles_inline_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º—É—Å–æ—Ä–∞
@dp.message(F.text == "üìç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º—É—Å–æ—Ä–∞")
async def sorting_info(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", url="https://recyclemap.ru/")]
        ]
    )
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø—É–Ω–∫—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º—É—Å–æ—Ä–∞ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ:", 
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã")
async def eco_tips(message: types.Message):
    await message.answer(f"–°–æ–≤–µ—Ç: {advice.advice()}")


# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—á–∫–æ–≤
def points_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤", callback_data="check_points")],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏", callback_data="earn_points")],
        ]
    )
    return keyboard


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üå± –û—á–∫–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏"
@dp.message(F.text == "üå± –û—á–∫–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")
async def handle_points_button(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=points_inline_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤"
@dp.callback_query(F.data == "check_points")
async def check_points(callback: types.CallbackQuery):
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT points FROM users WHERE id = ?", (callback.from_user.id,)) as cursor:
            row = await cursor.fetchone()
            if row: 
                points = row[0]
                await callback.message.answer(f"–£ –≤–∞—Å {points} –æ—á–∫–æ–≤ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏!")

            else:
                await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏"
@dp.callback_query(F.data == "earn_points")
async def earn_points(callback: types.CallbackQuery):
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT points FROM users WHERE id = ?", (callback.from_user.id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                current_points = row[0]
                new_points = current_points + 10  # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
                await db.execute("UPDATE users SET points = ? WHERE id = ?", (new_points, callback.from_user.id))
                await db.commit()
                await callback.message.answer(f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –æ—á–∫–æ–≤! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_points} –æ—á–∫–æ–≤. \n –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, –æ—á–∫–∏ - –ª–∏—à—å –º–æ—Ç–∏–≤–∞—Ü–∏—è \n –¥–ª—è –ø–æ–º–æ—â–∏ –ø–ª–∞–Ω–µ—Ç–µ!")

            else:
                await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT id FROM users") as cursor:
            async for row in cursor:
                await bot.send_message(row[0], "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä!")


@dp.message(F.text)
async def unknown_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ChatState.chatting.state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
        user_message = message.text

        message_history.append({"role": "user", "content": user_message})
        bot_answer = chat.chat(message_history)
        message_history.append({"role": "assistant", "content": bot_answer})

        await message.answer(bot_answer)

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
            reply_markup=main_menu()
        )


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, "interval", hours=6)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
